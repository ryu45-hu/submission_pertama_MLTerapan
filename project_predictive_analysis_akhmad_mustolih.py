# -*- coding: utf-8 -*-
"""Project Predictive Analysis_Akhmad Mustolih.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XQ_spIaupa-1KupVIS4ozF7IhCmrcStA

# Predictive Analysis

Mengimpor library yang diperlukan untuk proyek ini.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV

"""## Load Dataset

Loading Dataset.
"""

df = pd.read_csv("Healthcare-Diabetes.csv")
df

"""## Exploratory Data Analysis

Mengecek informasi pada data.
"""

df.info()

"""Mengecek duplikasi data."""

df.duplicated().sum()

"""Memastikan bahwa tidak ada missing value."""

df.isna().sum()

"""Menghapus kolom id, karena tidak diperlukan."""

df.drop('Id', axis=1, inplace=True)

"""Statistika deskriptif."""

df.describe(include="all")

"""Membuat Box-plot untuk untuk mengetahui outlier pada data."""

for column in df.columns:
    plt.figure(figsize=(8, 6))
    sns.boxplot(x=df[column])
    plt.title(f'Boxplot untuk kolom {column}')
    plt.show()

"""Menghapus outlier dengan menggunakan metode IQR."""

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
# Menghapus baris yang mengandung outlier
df = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)]
df.info()

"""Menampilkan distribusi fitur dengan histogram."""

df.hist(bins=50, figsize=(20,15))
plt.show()

"""Menampilkan matriks korelasi."""

plt.figure(figsize=(10, 8))
correlation_matrix = df.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='plasma', linewidths=0.5)
plt.title("Correlation Matrix", size=20)

"""## Modeling

### Splitting Data

Splitting data menjadi 70% | 30%
"""

X = df.drop(["Outcome"],axis=1)
y = df["Outcome"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42, stratify = y)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### Standarisasi

Melakukan standarisasi pada data training dan data testing.
"""

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)
X_train = pd.DataFrame(X_train, columns=X.columns)
X_train

"""Standarisasi."""

X_test = scaler.transform(X_test)

"""Menampilkan hasil standarisasi."""

X_test = pd.DataFrame(X_test, columns=X.columns)
X_test

"""Membuat dataframe untuk menyimpan hasil training dan testing (MSE)."""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['LinearRegression', 'RandomForest', 'KNN'])

"""Model Linear Regression"""

lr = LinearRegression()
lr.fit(X_train, y_train)
models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lr.predict(X_train), y_true=y_train)

"""Random Forest"""

rf = RandomForestRegressor(n_estimators=200, max_depth=20, random_state=42)
rf.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=rf.predict(X_train), y_true=y_train)

"""KNN"""

knn = KNeighborsRegressor(n_neighbors=2)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""## Evaluasi Model

Hasil evaluasi model dengan menggunakan metrik MSE.
"""

# Dataframe untuk hasil evaluasi
mse = pd.DataFrame(columns=['train', 'test'], index=['Linear Regression','Random Forest', 'KNN'])

# Algoritma yang digunakan
model_dict = {'Linear Regression':lr, 'Random Forest': rf, 'KNN': knn}

# Menghitung MSE model train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

mse

"""Plot nilai MSE setiap model."""

fig, ax = plt.subplots(figsize=(10, 6))
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""## Prediksi Model

Prediksi model dengan mengambil beberapa data testing
"""

prediksi = X_test.iloc[:10].copy()
pred_dict = {'y_true':y_test[:10]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).astype(float).round(1)

pd.DataFrame(pred_dict)